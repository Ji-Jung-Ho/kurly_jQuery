// 수학객체(Math)
                    // 반올림 Math.round(15.5) => 16
                    // 반올림 Math.round(15.4) => 15
                    // 올림   Math.ceil(15.1)  => 16 
                    // 내림   Math.floor(15.9) => 15
 
                    // 정규표현식
                    // 콤머 형식 만들기
                    // //  슬래쉬로 감싸서 표현
                    // +  1자 이상 여러글자
                    // *  0자 이상 여러글자
                    // ?  0자 또는 1자

                    // {3} 3자
                    // {3,} 3자 이상
                    // {3,5} 3~5자 범위 글자수
                    // /^[a-zA-Z][0-9]$/   ^시작문자   ? 끝문자
                    // () 그룹
                    // [] 범위
                    // [`~!@#$%^&*\(\)\-_+=\\|\[\]{}'";:/\?\.>,<]  특수문자 가능
                    // [가-힣ㄱ-ㅎㅏ-ㅣ]  한글사용 가능
                    // [A-Za-z]  영문 대소문자 구별없이 사용가능
                    // [^A-Za-z]  영문 대소문자 아닌것  곽괄호안에 삿갓(썰컴플렉스)은 부정 not
                    // [0-9]  숫자
                    // [^0-9]  숫자가 아닌것
                    // [\d]  숫자 digit Decimal
                    // (\d)  그룹 숫자
                    // (^\d)  그룹 숫자 시작이 숫자이다

                    // ()()  $1 $2
                    // ()()()  $1 $2 $3
                    // ()()()()  $1 $2 $3 $4
                    // (^\d+)(\d{3})  시작문자는 1자이상 숫자이고, 끝에문자는 3자인것
                    // ex) 3,456,789
                    // ex) 789
                    // 숫자 3자리 마다 콤머 찍기 
                    // 테스트 

                    // 정규표현식                    
                    // (뒤(뒷문자)는 3글자 숫자 이고$)
                    // (^시작문자 앞에는 1글자 이상 숫자 이면)
                    // 콤머형식 가능

                    // const regExp1 = /(^\d+)(\d{3})/;
                    // const regExp2 = /(^\d{1,})(\d{3})/;
                    // let str1 = '13412341234123'; 

                    // 테스트(test()) : 정규표현식과 스트링(숫자)값을 테스트
                    // 형식 : 정규표현식.test(스트링)   => true 또눈 false로 출력
                    // 유효성검사(test())
                    // const answer1 = regExp2.test(str1); 
                    // console.log( answer1 );  // 입력된 숫자가 정규펴현식 테스트

                    // 콤머형식으로 치환(Replace)
                    // 형식 : 스트링.replace(정규표현식, '$1,$2')
                    // const asnwer2 = str1.replace(regExp1, '$1,$2');
                    // str1 =  str1.replace(regExp1, '$1,$2');
                    // console.log( str1 );
                    // str1 =  str1.replace(regExp1, '$1,$2');
                    // console.log( str1 );
                    // str1 =  str1.replace(regExp1, '$1,$2');
                    // console.log( str1 );
                    // str1 =  str1.replace(regExp1, '$1,$2');
                    // console.log( str1 );

                    // while( regExp1.test(str1) ){ //true 이면 계속 반복 false 종료                            
                    //     str1 =  str1.replace(regExp1, '$1,$2');
                    //     console.log(str1);                                                        
                    // }                          
                    // console.log(str1); 
                        


                    // commaRegExp(str1); //콤머형식 함수 호출 실행

                   
 
                    // 스트링 숫자가 많으면 반복문을 사용 반복적으로 숫자를 판별하여
                    // 콤머형식으로 치환한다.

                    // 조건이 만족하는 동안 계속반복하는 반복문
                    // while(조건식){
                    //     수행 범위
                    //     내용
                    // }

                    // 1부터 10까지 증가하는 반복문 while() 문
                    // let cnt = 0;
                    // let hap = 0;
                    // while(cnt<10){
                    //     cnt++;
                    //     hap += cnt;  // hap = hap + cnt  누적합
                    //     console.log( cnt, hap );
                    // }

                    // 10부터 1까지 출력 하는 반복문 while() 문
                    // cnt = 10; 
                    // while(cnt>=1){                        
                    //     console.log( cnt );
                    //     cnt--;
                    // }




